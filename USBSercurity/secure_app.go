package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"os/exec"
	"strings"
	"time"
	"usbguard/controller"
)

const (
	driveLetter = "E"
	sector      = 2048
	blockSize   = 512
	aesKey      = "mySuperSecretKeyAES256!" // Ph·∫£i d√†i 16/24/32 byte cho AES-128/192/256
)

// Get UUID of the USB
func getUUID() (string, error) {
	cmd := exec.Command("powershell", "-Command", fmt.Sprintf(`(Get-Volume -DriveLetter %s).UniqueId`, driveLetter))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(string(output)), nil
}

// Get Volume Serial (extra check)
func getVolumeSerial() (string, error) {
	cmd := exec.Command("cmd", "/C", "vol", driveLetter+":")
	out, err := cmd.CombinedOutput()
	if err != nil {
		return "", err
	}
	parts := strings.Split(string(out), "Serial Number is ")
	if len(parts) < 2 {
		return "", fmt.Errorf("cannot parse volume serial")
	}
	return strings.TrimSpace(parts[1]), nil
}

// AES-GCM decrypt
func decryptAESGCM(ciphertext []byte, key []byte) (string, error) {
	if len(ciphertext) < 12+16 {
		return "", fmt.Errorf("invalid ciphertext")
	}
	nonce := ciphertext[:12]
	tagged := ciphertext[12:]

	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		return "", err
	}

	plain, err := aesgcm.Open(nil, nonce, tagged, nil)
	if err != nil {
		return "", err
	}

	return string(plain), nil
}

func readFromSector() ([]byte, error) {
	path := fmt.Sprintf(`\\.\%s:`, driveLetter)
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("failed to open disk: %s", err)
	}
	defer file.Close()

	offset := int64(sector * blockSize)
	_, err = file.Seek(offset, 0)
	if err != nil {
		return nil, fmt.Errorf("seek failed: %s", err)
	}

	buf := make([]byte, blockSize)
	_, err = file.Read(buf)
	if err != nil && err != io.EOF {
		return nil, fmt.Errorf("read failed: %s", err)
	}

	return buf, nil
}

// H√†m gi·∫£ t√™n "v√¥ h·∫°i", th·∫≠t ra l√† Anti-Patch
func checkAssets(secret string) {
	sum := sha256.Sum256([]byte(secret + "_res"))
	if sum[2]^sum[15] != 0xAA {
		panic("üí• Data corrupted!")
	}
}

func verifyStartup(secret string) {
	sum := sha256.Sum256([]byte("boot:" + secret))
	if sum[7]+sum[9] != 0xEF {
		panic("üí£ Tampering detected")
	}
}

func slowVerify(secret string) {
	go func() {
		sum := sha256.Sum256([]byte(secret + "::live"))
		if sum[0]^sum[1]^sum[2] != 0x42 {
			panic("‚ò†Ô∏è Runtime integrity fail")
		}
	}()
}

// üîê TƒÉng c∆∞·ªùng b·∫£o m·∫≠t runtime m·ªói 15 gi√¢y
func startSecurityMonitor() {
	go func() {
		for {

			if controller.IsDebugged() {
				fmt.Println("üõë Ph√°t hi·ªán hack (runtime) ‚Äì tho√°t.")
				os.Exit(1)
			}
			time.Sleep(15 * time.Second)
		}
	}()
}

func printHelp() {
	fmt.Println("üîí USBGuard Secure App")
	fmt.Println("S·ª≠ d·ª•ng:")
	fmt.Println("  secure_app.exe boot           - T·ªëi ∆∞u h·ªá th·ªëng Windows")
	fmt.Println("  secure_app.exe fastApp        - TƒÉng t·ªëc Windows")
	fmt.Println("  secure_app.exe help           - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n")
}

func main() {

	fmt.Println(` 
                                                                                                                                       

888    d8P  888               d8b                    .d888          
888   d8P   888               Y8P                   d88P"           
888  d8P    888                                     888             
888d88K     88888b.   8888b.  888  .d8888b  8888b.  888888  .d88b.  
8888888b    888 "88b     "88b 888 d88P"        "88b 888    d8P  Y8b 
888  Y88b   888  888 .d888888 888 888      .d888888 888    88888888 
888   Y88b  888  888 888  888 888 Y88b.    888  888 888    Y8b.     
888    Y88b 888  888 "Y888888 888  "Y8888P "Y888888 888     "Y8888  
                                                                    
                                                                    
                                                                                      
`)

	startSecurityMonitor() // üîê Ki·ªÉm tra n·ªÅn n√¢ng cao m·ªói 15s

	if len(os.Args) < 2 {
		printHelp()
		return
	}

	if devBuild {
		// dev
		// code logic app

		switch os.Args[1] {
		case "boot":
			controller.RunApplication()
		case "fastApp":
			controller.RunApps()
		case "help", "-h", "--help":
			printHelp()
		default:
			controller.HandleOther(os.Args[1:])
		}
	} else {
		// release
		// check lisen
		expectedUUID, err := getUUID()
		if err != nil {
			fmt.Println("‚ùå Kh√¥ng th·ªÉ l·∫•y UUID:", err)
			return
		}
		serial, err := getVolumeSerial()
		if err != nil {
			fmt.Println("‚ùå Kh√¥ng th·ªÉ l·∫•y serial:", err)
			return
		}

		key := expectedUUID + ":" + serial

		// G·ªçi c√°c anti patch r·∫£i r√°c
		checkAssets(key)
		verifyStartup(key)

		rawData, err := readFromSector()
		if err != nil {
			fmt.Println("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc sector:", err)
			return
		}

		decrypted, err := decryptAESGCM(rawData, []byte(aesKey))
		if err != nil {
			fmt.Println("‚ùå Kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c:", err)
			return
		}

		if decrypted != key {
			fmt.Println("üö´ Kh√¥ng ƒë√∫ng USB ‚Äì t·ª´ ch·ªëi ch·∫°y.")
			return
		}

		// ‚úÖ B·∫Øt ƒë·∫ßu app th·∫≠t
		fmt.Println("‚úÖ USB h·ª£p l·ªá. Ch·∫°y ph·∫ßn m·ªÅm...")

		// Ch·∫°y ki·ªÉm tra n·ªÅn ·∫©n ‚Üí anti patch runtime
		slowVerify(key)
		// code logic app

		switch os.Args[1] {
		case "boot":
			controller.RunApplication()
		case "fastApp":
			controller.RunApps()
		case "help", "-h", "--help":
			printHelp()
		default:
			controller.HandleOther(os.Args[1:])
		}
	}

}
